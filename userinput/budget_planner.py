# -*- coding: utf-8 -*-
"""budget_planner.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13cAOS0VHNrvD-XcJQsj_IkvV3oAq2xhG
"""



import json
import pandas as pd

with open('merged.json') as f:
    data = json.load(f)

df_original = pd.DataFrame.from_records(data["data"], columns=["name", "country","cost_of_living_index","rent_index","cost_of_living_plus_rent_index","groceries_index","local_purchasing_power_index","restaurant_price_index","us_state","cost_of_living_details"])
df_original.drop('cost_of_living_details', axis =1, inplace=True)
df_original

df = pd.read_json('merged.json')
df

data_list = []
labels = []

for city in range(len(data['data'])):
  temp = pd.DataFrame(df.data.values.tolist())['cost_of_living_details'][city][0]['details']
  transformed_df = pd.DataFrame.from_records(temp)
  values = list(transformed_df['Value'])
  labels = transformed_df['Item'].tolist()
  data_list.append(values)


new_df = pd.DataFrame(data = data_list, columns = labels)


raw_df = pd.concat([df_original, new_df], axis =1)
raw_df = raw_df.set_index('name')
raw_df

# Drop unncessary columns

raw_df.columns

raw_df.drop(['Preschool (or Kindergarten), Full Day, Private, Monthly for 1 Child', 'International Primary School, Yearly for 1 Child', 'Tennis Court Rent (1 Hour on Weekend)', 'Cigarettes 20 Pack (Marlboro)', '1 min. of Prepaid Mobile Tariff Local (No Discounts or Plans)', 'us_state'], axis = 1, inplace = True)

raw_df_int = raw_df[list(raw_df.columns)[1:]].apply(pd.to_numeric)
raw_df_first_col = raw_df['country']
raw_df = pd.concat([raw_df_first_col, raw_df_int], axis = 1)\

raw_df

CLOTHING_WEIGHT = 0.35
SPORTS_AND_LEISURE_WEIGHTS = [2.3, 6]
UTILITIES = [1, 1]
MARKETS = [25, 31, 14, 20, 12, 15, 15, 31, 25, 30, 22, 24, 10, 18, 30, 4, 6]
HOUSING = 0.25

def calculate_budget(city, income, housing, dietary):

  emergency_funds = 0
  current_income = income
  ## CATEGORIES ## 
  clothing_and_shoes = raw_df.loc[city]['1 Pair of Jeans (Levis 501 Or Similar)']*CLOTHING_WEIGHT + raw_df.loc[city]['1 Summer Dress in a Chain Store (Zara, H&M, ...)']*CLOTHING_WEIGHT + raw_df.loc[city][ '1 Pair of Nike Running Shoes (Mid-Range)']*CLOTHING_WEIGHT + raw_df.loc[city]['1 Pair of Men Leather Business Shoes']*CLOTHING_WEIGHT

  sports_and_leisure = raw_df.loc[city]['Fitness Club, Monthly Fee for 1 Adult']*SPORTS_AND_LEISURE_WEIGHTS[0] + raw_df.loc[city]['Cinema, International Release, 1 Seat']*SPORTS_AND_LEISURE_WEIGHTS[1]
  
  utilities = raw_df.loc[city]['Fitness Club, Monthly Fee for 1 Adult']*UTILITIES[0] + raw_df.loc[city]['Fitness Club, Monthly Fee for 1 Adult']*UTILITIES[0] + raw_df.loc[city]['Internet (60 Mbps or More, Unlimited Data, Cable/ADSL)']*UTILITIES[1]

  markets = int(raw_df.loc[city]['Milk (regular), (1 liter)'])*MARKETS[0] + int(raw_df.loc[city]['Loaf of Fresh White Bread (500g)'])*MARKETS[1] + int(raw_df.loc[city]['Rice (white), (1kg)'])*MARKETS[2] + int(raw_df.loc[city]['Eggs (regular) (12)'])*MARKETS[3] + int(raw_df.loc[city]['Local Cheese (1kg)'])*MARKETS[4] + int(raw_df.loc[city]['Chicken Fillets (1kg)'])*MARKETS[5] + int(raw_df.loc[city]['Beef Round (1kg) (or Equivalent Back Leg Red Meat)'])*MARKETS[6] + int(raw_df.loc[city]['Apples (1kg)'])*MARKETS[7] + int(raw_df.loc[city]['Banana (1kg)'])*MARKETS[8] + int(raw_df.loc[city]['Oranges (1kg)'])*MARKETS[9] + int(raw_df.loc[city]['Tomato (1kg)'])*MARKETS[10] + int(raw_df.loc[city]['Potato (1kg)'])*MARKETS[11] + int(raw_df.loc[city]['Onion (1kg)'])*MARKETS[12] + int(raw_df.loc[city]['Lettuce (1 head)'])*MARKETS[13] + int(raw_df.loc[city]['Water (1.5 liter bottle)'])*MARKETS[14] + int(raw_df.loc[city]['Bottle of Wine (Mid-Range)'])*MARKETS[15] + int(raw_df.loc[city]['Domestic Beer (0.5 liter bottle)'])*MARKETS[16]

  
  current_income -= (clothing_and_shoes + sports_and_leisure +  utilities)

  
  # HOUSING
  
  if housing == 'Apartment (1 bedroom) in City Centre':
    current_income -= raw_df.loc[city]['Apartment (1 bedroom) in City Centre']*HOUSING
    rents_and_apartments = raw_df.loc[city]['Apartment (1 bedroom) in City Centre']*HOUSING
  
  if housing == 'Apartment (1 bedroom) Outside of Centre':
    current_income -= raw_df.loc[city]['Apartment (1 bedroom) Outside of Centre']*HOUSING
    rents_and_apartments =  raw_df.loc[city]['Apartment (1 bedroom) Outside of Centre']*HOUSING
  

  if housing == 'Apartment (Shared Room in a 3 Bedrooms Apartment) in City Centre':
    current_income -=  raw_df.loc[city]['Apartment (Shared Room in a 3 Bedrooms Apartment) in City Centre']*HOUSING
    rents_and_apartments = raw_df.loc[city]['Apartment (Shared Room in a 3 Bedrooms Apartment) in City Centre']*HOUSING
  

  if housing == 'Apartment (Shared Room in a 3 Bedrooms Apartment) Outside of Centre':
    current_income -= raw_df.loc[city]['Apartment (Shared Room in a 3 Bedrooms Apartment) Outside of Centre']*HOUSING
    rents_and_apartments = raw_df.loc[city]['Apartment (Shared Room in a 3 Bedrooms Apartment) Outside of Centre']*HOUSING


  # DIETARY

  if dietary == 'Meal, Inexpensive Restaurant':
    current_income -=  raw_df.loc[city]['Meal, Inexpensive Restaurant']*16 + raw_df.loc[city]['McMeal at McDonalds (or Equivalent Combo Meal)']*6 +  raw_df.loc[city]['Coke/Pepsi (0.33 liter bottle)']*6 + raw_df.loc[city]['Water (0.33 liter bottle)']
    foodstuffs =  raw_df.loc[city]['Meal, Inexpensive Restaurant']*16 + raw_df.loc[city]['McMeal at McDonalds (or Equivalent Combo Meal)']*6 +  raw_df.loc[city]['Coke/Pepsi (0.33 liter bottle)']*6 + raw_df.loc[city]['Water (0.33 liter bottle)']

  if dietary == 'Meal for 2 People, Mid-range Restaurant, Three-course':
    current_income -=   raw_df.loc[city]['Meal for 2 People, Mid-range Restaurant, Three-course']*16 + raw_df.loc[city]['Domestic Beer (0.5 liter draught)']*5 + raw_df.loc[city]['raw_df.loc[city]']*5 +  raw_df.loc[city]['Meal for 2 People, Mid-range Restaurant, Three-course']['Cappuccino (regular)']*15
    foodstuffs =  raw_df.loc[city]['Meal for 2 People, Mid-range Restaurant, Three-course']*16 + raw_df.loc[city]['Domestic Beer (0.5 liter draught)']*5 + raw_df.loc[city]['raw_df.loc[city]']*5 +  raw_df.loc[city]['Meal for 2 People, Mid-range Restaurant, Three-course']['Cappuccino (regular)']*15
  
  if dietary == 'Home':
    current_income -= markets
    foodstuffs = markets



  lifestyle = sports_and_leisure + clothing_and_shoes
  housing = rents_and_apartments + utilities
  food = foodstuffs 
  emergency_funds = current_income



  # returns an array 

  return [lifestyle, housing, food, emergency_funds]